# Docker Compose for Mandate Vault
# =================================

version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:14-alpine
    container_name: mandate-vault-db
    environment:
      POSTGRES_DB: mandate_vault
      POSTGRES_USER: mandate_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-dev_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mandate_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mandate-network

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: mandate-vault-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mandate-network

  # Mandate Vault API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mandate-vault-api
    environment:
      # Application
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-False}
      
      # Security
      SECRET_KEY: ${SECRET_KEY}
      
      # Database
      DATABASE_URL: postgresql+asyncpg://mandate_user:${DB_PASSWORD:-dev_password}@db:5432/mandate_vault
      
      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN:-}
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - mandate-network
    restart: unless-stopped

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: mandate-vault-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - mandate-network
    restart: unless-stopped

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: mandate-vault-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - mandate-network
    restart: unless-stopped

  # Nginx reverse proxy (optional for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: mandate-vault-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - mandate-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  mandate-network:
    driver: bridge

