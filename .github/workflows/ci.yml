name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, feat/*]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'
  SECRET_KEY: 'test-secret-key-minimum-32-characters-long-for-ci'
  DATABASE_URL: 'sqlite+aiosqlite:///./test_ci.db'
  ENVIRONMENT: 'testing'
  ACP_ENABLE: 'true'
  ACP_WEBHOOK_SECRET: 'test-acp-webhook-secret-key-for-ci'

jobs:
  # ============================================================================
  # Unit and Integration Tests
  # ============================================================================
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio
      
      - name: Run unit tests
        run: |
          python -m pytest tests/ \
            --ignore=tests/integration \
            --ignore=tests/e2e \
            --ignore=tests/security \
            --ignore=tests/performance \
            --ignore=tests/load \
            -v \
            --cov=app \
            --cov-report=xml \
            --cov-report=term-missing \
            --junitxml=junit/unit-test-results.xml
      
      - name: Run integration tests
        run: |
          python -m pytest tests/integration/ \
            -v \
            --junitxml=junit/integration-test-results.xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: junit/*.xml
  
  # ============================================================================
  # Performance Testing (k6 Smoke Test)
  # ============================================================================
  performance:
    name: Performance & Smoke Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Set up k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      
      - name: Create smoke test user
        run: |
          python scripts/create_smoke_test_user.py
      
      - name: Start API server
        run: |
          python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 > /tmp/server.log 2>&1 &
          echo $! > /tmp/server.pid
          sleep 10
      
      - name: Wait for server
        run: |
          for i in {1..30}; do
            if curl -sf http://localhost:8000/healthz > /dev/null 2>&1; then
              echo "‚úÖ Server is ready"
              exit 0
            fi
            echo "Waiting for server... ($i/30)"
            sleep 2
          done
          echo "‚ùå Server failed to start"
          cat /tmp/server.log
          exit 1
      
      - name: Run k6 smoke test
        run: |
          k6 run tests/load/smoke_multiprotocol.js \
            --out json=k6-results.json \
            --quiet
      
      - name: Run k6 verify/search smoke
        run: |
          k6 run tests/load/smoke_verify_search.js --quiet
      
      - name: Check performance thresholds
        run: |
          python3 << 'EOF'
          import json
          import sys
          
          # Load k6 results
          with open('k6-results.json', 'r') as f:
            lines = f.readlines()
          
          # Parse metrics
          post_auth_latencies = []
          
          for line in lines:
            data = json.loads(line)
            if data.get('type') == 'Point' and data.get('metric') == 'http_req_duration':
              tags = data.get('data', {}).get('tags', {})
              if tags.get('name') == 'POST /authorizations':
                post_auth_latencies.append(data['data']['value'])
          
          if not post_auth_latencies:
            print("‚ö†Ô∏è  No POST /authorizations requests found")
            sys.exit(0)
          
          # Calculate p95
          post_auth_latencies.sort()
          p95_index = int(len(post_auth_latencies) * 0.95)
          p95_latency = post_auth_latencies[p95_index] if p95_index < len(post_auth_latencies) else post_auth_latencies[-1]
          
          print(f"üìä POST /authorizations Performance:")
          print(f"   Total requests: {len(post_auth_latencies)}")
          print(f"   p95 latency: {p95_latency:.2f}ms")
          print(f"   Threshold: 200ms")
          
          if p95_latency > 200:
            print(f"‚ùå FAILED: p95 latency ({p95_latency:.2f}ms) exceeds threshold (200ms)")
            sys.exit(1)
          else:
            print(f"‚úÖ PASSED: p95 latency within threshold")
            sys.exit(0)
          EOF
      
      - name: Run Python smoke test
        run: |
          export API_BASE_URL="http://localhost:8000"
          export TEST_EMAIL="smoketest@example.com"
          export TEST_PASSWORD="SmokeTest2025Pass"
          export TEST_TENANT_ID="tenant-smoke-test"
          export ACP_WEBHOOK_SECRET="test-acp-webhook-secret-key"
          python3 ./scripts/smoke_authorizations.py
      
      - name: Run ACP webhooks smoke
        run: |
          export API_BASE_URL="http://localhost:8000"
          export TEST_EMAIL="smoketest@example.com"
          export TEST_PASSWORD="SmokeTest2025Pass"
          export TEST_TENANT_ID="tenant-smoke-test"
          export ACP_WEBHOOK_SECRET="test-acp-webhook-secret-key"
          python3 ./scripts/smoke_acp_webhooks.py

      - name: Run evidence export smoke
        run: |
          export API_BASE_URL="http://localhost:8000"
          export TEST_EMAIL="smoketest@example.com"
          export TEST_PASSWORD="SmokeTest2025Pass"
          export TEST_TENANT_ID="tenant-smoke-test"
          python3 ./scripts/smoke_evidence_export.py
      
      - name: Stop server
        if: always()
        run: |
          if [ -f /tmp/server.pid ]; then
            kill $(cat /tmp/server.pid) 2>/dev/null || true
          fi
      
      - name: Upload k6 results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: k6-results
          path: k6-results.json
  
  # ============================================================================
  # Security Scanning
  # ============================================================================
  security:
    name: Security Scans
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      # Snyk Python dependency scanning
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=critical --fail-on=all
          command: test
      
      # Trivy vulnerability scanning
      - name: Run Trivy scanner (dependencies)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'  # Don't fail yet, check in next step
      
      - name: Check Trivy results for critical CVEs
        run: |
          python3 << 'EOF'
          import json
          import sys
          
          try:
            with open('trivy-results.sarif', 'r') as f:
              sarif = json.load(f)
            
            critical_count = 0
            high_count = 0
            
            for run in sarif.get('runs', []):
              for result in run.get('results', []):
                level = result.get('level', 'note')
                if level == 'error':  # Critical
                  critical_count += 1
                elif level == 'warning':  # High
                  high_count += 1
            
            print(f"üîí Trivy Security Scan Results:")
            print(f"   Critical: {critical_count}")
            print(f"   High: {high_count}")
            
            if critical_count > 0:
              print(f"‚ùå FAILED: {critical_count} critical CVE(s) found")
              sys.exit(1)
            else:
              print(f"‚úÖ PASSED: No critical CVEs found")
              sys.exit(0)
          
          except FileNotFoundError:
            print("‚ö†Ô∏è  No Trivy results file found")
            sys.exit(0)
          EOF
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      # Docker image scanning (if building image)
      - name: Build Docker image
        run: |
          docker build -t mandate-vault:${{ github.sha }} .
      
      - name: Run Trivy scanner (Docker image)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'mandate-vault:${{ github.sha }}'
          format: 'table'
          severity: 'CRITICAL'
          exit-code: '1'  # Fail on critical CVEs in image
      
      - name: Upload security scan artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-results
          path: |
            trivy-results.sarif
            snyk-report.json
  
  # ============================================================================
  # Linting and Code Quality
  # ============================================================================
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 isort mypy
      
      - name: Check code formatting (black)
        run: |
          black --check app tests
      
      - name: Check import sorting (isort)
        run: |
          isort --check-only app tests
      
      - name: Lint with flake8
        run: |
          flake8 app tests --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 app tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Type check with mypy (non-blocking)
        continue-on-error: true
        run: |
          mypy app --ignore-missing-imports
  
  # ============================================================================
  # Build and Publish
  # ============================================================================
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security, lint]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/mandate-vault
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Image digest
        run: echo ${{ steps.meta.outputs.digest }}
  
  # ============================================================================
  # Deployment (optional)
  # ============================================================================
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.mandatevault.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to Cloud Run
        run: |
          echo "Deploying to Google Cloud Run staging environment"
          # Add actual deployment commands here
          # gcloud run deploy mandate-vault-staging --image ...
